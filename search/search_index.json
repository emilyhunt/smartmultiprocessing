{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SmartMultiprocessing is in development!","text":"<p>This project is a spin-out from code that Emily wrote during her PhD. It's currently in alpha / active development - check back here soon for the first production-ready versions!</p>"},{"location":"#commands-for-docs","title":"Commands for docs","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#docs-layout","title":"Docs layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"api/smartprocess/","title":"SmartProcess","text":"<p>Extension to <code>multiprocessing.Process</code> with multiple memory-management options, the ability to return results from processes, and more.</p> <p>This is a relatively low-level part of SmartMultiprocessing. Average users are probably more interested in more abstract parts of this library, like  <code>SmartPool</code> and <code>SmartQueue</code>, which can initialise as many <code>SmartProcess</code>es as you'd like and include GUI options.</p> <p>The API of <code>SmartProcess</code> matches that of <code>multiprocessing.Process</code>, except with some notable additions like:</p> <p><code>SmartProcess.resource_usage()</code> - get the process' current CPU and memory usage.</p> <p><code>SmartProcess.is_finished()</code> - boolean for if process is done.</p> <p><code>SmartProcess.get_result()</code> - get the result from <code>target</code>, if process finished.</p> <p><code>SmartProcess.get_children()</code> - get all child processes of this process.</p>"},{"location":"api/smartprocess/#smartmultiprocessing.SmartProcess.__init__","title":"<code>__init__(group=None, target=None, name=None, args=(), kwargs={}, daemon=None, fetch_result=False)</code>","text":"<p>Create a new SmartProcess object.</p> <p>Parameters:</p> Name Type Description Default <code>group</code> <code>None</code> <p>Argument that must always be None. It exists for compatibility with the threading.Thread API.</p> <code>None</code> <code>target</code> <code>Callable</code> <p>Target function to run on.</p> <code>None</code> <code>name</code> <code>str</code> <p>Name of process to pass to multiprocessing.Process.</p> <code>None</code> <code>args</code> <code>Iterable[Any]</code> <p>Arguments to pass to <code>target</code>.</p> <code>()</code> <code>kwargs</code> <code>Mappable[str, Any]</code> <p>Keyword arguments to pass to <code>target</code>.</p> <code>{}</code> <code>daemon</code> <code>None or bool</code> <p>Whether or not to run as a daemon (background process). Passed to multiprocessing.Process. TODO: not sure if this can actually be supported...</p> <code>None</code> <code>fetch_result</code> <code>bool</code> <p>Whether or not to try and fetch a result in-memory for <code>target</code>. <code>target</code> must return a value for this to be used.</p> <code>False</code> Notes <p>CPU and memory usage tracking is done using <code>psutil</code>. Support on systems that aren't Linux, Mac, or Windows may be limited.</p> <p>Examples:</p> <p>Start a process that prints to the console in the background:</p> <pre><code>&gt;&gt;&gt; p = smartmultiprocessing.SmartProcess(target=lambda: print(\"Hello World\"))\n&gt;&gt;&gt; p.start()\nHello World\n</code></pre> <p>We can check if the process is finished:</p> <pre><code>&gt;&gt;&gt; p.is_finished()\nTrue\n</code></pre> <p>or get its exitcode:</p> <pre><code>&gt;&gt;&gt; p.get_exitcode()\n0\n</code></pre>"},{"location":"api/smartprocess/#smartmultiprocessing.SmartProcess.get_children","title":"<code>get_children(recursive=True)</code>","text":"<p>Gets the children of the process. TODO: document params</p>"},{"location":"api/smartprocess/#smartmultiprocessing.SmartProcess.memory_usage","title":"<code>memory_usage(children=False)</code>","text":"<p>Returns current memory usage of the process.. TODO: document params</p>"},{"location":"api/smartprocess/#smartmultiprocessing.SmartProcess.cpu_usage","title":"<code>cpu_usage(interval=None, children=False)</code>","text":"<p>Returns current CPU usage of the process.. TODO: document params</p>"},{"location":"api/smartprocess/#smartmultiprocessing.SmartProcess.resource_usage","title":"<code>resource_usage(interval=None, children=False)</code>","text":""},{"location":"api/smartprocess/#smartmultiprocessing.SmartProcess.get_result","title":"<code>get_result(join=False, timeout=None, pipe_timeout=1.0)</code>","text":"<p>Attempts to fetch a result for the process. TODO: document params</p>"},{"location":"api/smartprocess/#smartmultiprocessing.SmartProcess.get_exitcode","title":"<code>get_exitcode()</code>","text":"<p>Returns the exitcode of the process, which is only set if it has finished.</p>"},{"location":"api/smartprocess/#smartmultiprocessing.SmartProcess.run","title":"<code>run()</code>","text":"<p>Runs the target of the process. </p> <p>Not recommended: use <code>SmartProcess.start()</code> instead.</p>"},{"location":"api/smartprocess/#smartmultiprocessing.SmartProcess.start","title":"<code>start()</code>","text":"<p>Starts the process.</p>"},{"location":"api/smartprocess/#smartmultiprocessing.SmartProcess.join","title":"<code>join(timeout=None)</code>","text":"<p>Joins the thread of the process (assuming it has been started already) and blocks until completion.</p>"},{"location":"api/smartprocess/#smartmultiprocessing.SmartProcess.is_alive","title":"<code>is_alive()</code>","text":"<p>Boolean of whether or not the process is currently running.</p>"},{"location":"api/smartprocess/#smartmultiprocessing.SmartProcess.is_finished","title":"<code>is_finished()</code>","text":"<p>Boolean of whether or not the process has finished.</p>"},{"location":"api/smartprocess/#smartmultiprocessing.SmartProcess.terminate","title":"<code>terminate(children=True)</code>","text":"<p>Sends a SIGTERM and terminates the process. TODO: document params</p>"},{"location":"api/smartprocess/#smartmultiprocessing.SmartProcess.kill","title":"<code>kill(children=True)</code>","text":"<p>Sends a SIGKILL and kills the process. TODO: document params</p>"},{"location":"api/smartprocess/#smartmultiprocessing.SmartProcess.close","title":"<code>close()</code>","text":"<p>Closes all resources occupied by the process.</p>"}]}